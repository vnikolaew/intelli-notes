generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views", "fullTextSearch", "driverAdapters", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, pgvector(map: "vector", schema: "public"), pg_trgm, fuzzystrmatch()]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  metadata      Json?     @default("null") @db.JsonB
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  notes               Note[]
  noteLikes           NoteLike[]
  categories          NoteCategory[]
  comments            NoteComment[]
  chatHistories       AiChatHistory[]
  chatHistoryMessages AiChatHistoryMessage[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  metadata          Json?   @default("null") @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Note {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title    String?
  metadata Json?    @default("null") @db.JsonB
  raw_text String   @db.VarChar(5000)
  tags     String[]

  categoryId String?       @db.Uuid
  category   NoteCategory? @relation(fields: [categoryId], references: [id])

  authorId String
  author   User    @relation(fields: [authorId], references: [id])
  public   Boolean @default(false)

  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
  likes     NoteLike[]
  comments  NoteComment[]
}

model NoteLike {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  noteId String @db.Uuid
  note   Note   @relation(fields: [noteId], references: [id])

  userId   String
  user     User   @relation(fields: [userId], references: [id])
  metadata Json?  @default("null") @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model NoteComment {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  noteId String @db.Uuid
  note   Note   @relation(fields: [noteId], references: [id])

  raw_text String
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  metadata Json?  @default("null") @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model NoteCategory {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  name     String
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  metadata Json?  @default("null") @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  notes     Note[]
}

model AiChatHistory {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId   String
  user     User   @relation(fields: [userId], references: [id])
  metadata Json?  @default("null") @db.JsonB

  createdAt DateTime               @default(now())
  updatedAt DateTime?              @updatedAt
  messages  AiChatHistoryMessage[]
}

model AiChatHistoryMessage {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  chatId String        @db.Uuid
  chat   AiChatHistory @relation(fields: [chatId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  raw_text String
  role     ChatHistoryMessageRole
  metadata Json?                  @default("null") @db.JsonB

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum ChatHistoryMessageRole {
  USER
  SYSTEM
  ASSISTANT
}
